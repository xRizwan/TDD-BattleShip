{"version":3,"sources":["serviceWorker.js","Components/GridBoard.js","Game/Ship.js","Game/Gameboard.js","Game/Player.js","Game/shipData.js","Components/BattleShips.js","Components/Header.js","Components/PlayButtons.js","Components/WinnerDisplayer.js","Components/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Grid","props","changeRow","event","target","parentElement","dataset","row","x","changeColumn","column","y","changeCoords","gamePlayer","playGame","drop","bind","preventDefault","shipSize","dataTransfer","getData","currentY","this","changeBoard","changeShips","className","id","class","board","map","current","xIndex","key","onDragOver","allowDrop","onDrop","data-row","data-column","curIndex","data-x","data-y","onMouseOver","playable","onClick","React","Component","Ship","num","name","size","coords","length","Array","i","shipName","hit","spot","undefined","Error","reduce","acc","cur","isSunk","Gameboard","counter","shipsContainer","addShip","newShip","recieveAttack","substr","hitSpot","xAx","yAx","lengthOfShip","c","containsShips","obj","hasOwnProperty","isEmpty","Player","playerName","playerBoard","gameBoard","autoPlace","randomX","Math","floor","random","randomY","enemy","playTurn","won","autoTurn","console","log","eBoardSpot","autoShipsAdd","allShips","BattleShip","handleDrag","setData","changeName","changeData","shipsData","currentIndex","draggable","onDragStart","data-size","data-name","data-current","data-spot","Header","PlayButtons","play","restart","WinnerDisplayer","winner","App","refreshState","player1","computer","setState","forcePlayable","state","pResult","computerBoard","result","Number","changeShipName","filter","Fragment","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2708fe23.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","// eslint-disable-next-line\r\nimport React, { useState } from 'react';\r\n\r\nexport default class Grid extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.drop = this.drop.bind(this)\r\n    }\r\n\r\n    allowDrop(event){\r\n        event.preventDefault();\r\n    }\r\n\r\n    // on drop\r\n    drop(event){\r\n        event.preventDefault();\r\n\r\n        // get the data sent on drag\r\n        let shipSize = event.dataTransfer.getData(\"ShipSize\");\r\n        let currentY = event.dataTransfer.getData(\"CurrentY\");\r\n        let x = event.target.dataset.x;\r\n        let y = event.target.dataset.y - currentY + 1;\r\n\r\n        // change board according to the data provided\r\n        // from the dragged ship\r\n        let result = this.props.changeBoard(shipSize, x, y);\r\n\r\n        // if board was successfully changed\r\n        // then remove the ship so it cant be added again\r\n        if (result){\r\n            this.props.changeShips();\r\n            return;\r\n\r\n        }\r\n        else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // functions to change the row and column\r\n    // data attribute of the row and column respectively\r\n    changeRow = (event) => {\r\n        event.target.parentElement.dataset.row = event.target.dataset.x;\r\n    }\r\n    \r\n    changeColumn = (event) => {\r\n        event.target.parentElement.dataset.column = event.target.dataset.y;\r\n    }\r\n\r\n    changeCoords = (event) => {\r\n        this.changeRow(event);\r\n        this.changeColumn(event);\r\n    }\r\n\r\n    gamePlayer = (event) => {\r\n        let x = event.target.dataset.x;\r\n        let y = event.target.dataset.y;\r\n        this.props.playGame(x, y);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div\r\n                className='grid'\r\n                id={this.props.class}\r\n            >\r\n            {\r\n            this.props.board.map((current, xIndex) => {\r\n                return (\r\n                    <div\r\n                        key={xIndex}\r\n                        onDragOver={this.allowDrop}\r\n                        onDrop={this.drop}\r\n                        className=\"grid-row\"\r\n                        data-row={0}\r\n                        data-column={0}\r\n                    >\r\n                        {current.map((current, curIndex) => {\r\n                            return(\r\n                                <span\r\n                                    key={curIndex}\r\n                                    data-x = {xIndex}\r\n                                    data-y = {curIndex}\r\n                                    className={\r\n                                        `grid-row-item \r\n                                        ${(current.match('ship') && this.props.class !== \"computer\" )? 'hasShip': null}\r\n                                        ${(current.match('ship') && this.props.class === 'computer') ? 'cShip' : '' }\r\n                                        ${current.match('x') ? \"ship\" : ''}\r\n                                        ${current.match('.') ? \"noShip\" : ''}\r\n                                        `}\r\n                                    onMouseOver={!this.props.playable ? this.changeCoords : null}\r\n                                    onClick={(this.props.class === \"computer\") ? this.gamePlayer : null}\r\n                                    >{ current.match('ship') ? ' ' : current }\r\n                                </span>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })}\r\n            </div>\r\n        )\r\n    }\r\n}","\r\n// main function to\r\n// create a ship of size num and name of name\r\n// at x,y coords on the board\r\nfunction Ship(num, name, x, y){\r\n    let size = num;\r\n    let coords = [x,y];\r\n\r\n    // length holds all the ship data in an array\r\n    // NAME MIGHT BE CONFUSING\r\n    // NAMED AS SUCH BECAUSE WAS EASIER TO REMEMBER\r\n    let length = new Array(num)\r\n    for (let i = 0; i < length.length; i++){\r\n        let shipName = name + i + \"\";\r\n        length[i] = shipName;\r\n    }\r\n\r\n    // hit function to take a spot and attack that spot\r\n    // REMOVES THAT SPOT OF THE SHIP FROM THE LENGTH ARRAY\r\n    let hit = (spot) => {\r\n        if (spot > length.length -1 || spot === undefined){\r\n            throw Error(\"No Such Spot Exists\")\r\n        }\r\n        length[spot] = \"x\";\r\n        return length.reduce((acc, cur) => (cur === 'x' ? acc + 1 : acc), 0)\r\n    }\r\n\r\n    // function that checks all the remaining parts of the ship\r\n    // if none found that ship has sunk\r\n    let isSunk = () => {\r\n        let damageTaken = length.reduce((acc, cur) => (cur === 'x' ? acc + 1 : acc), 0);\r\n        if(damageTaken === size){\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return {\r\n        hit,\r\n        isSunk,\r\n        length,\r\n        size,\r\n        coords\r\n    }\r\n}\r\n\r\n// exports\r\nexport default Ship;","import Ship from './Ship';\r\n\r\nfunction Gameboard() {\r\n\r\n    // main game board\r\n    const board = [\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n        ['','','','','','','','','',''],\r\n    ]\r\n\r\n    // counter to give dynamic names to the ships\r\n    let counter = 0; \r\n    // object to contain the information of the ships on the board\r\n    let shipsContainer = {};\r\n\r\n    // function to add the ship to the board\r\n    let addShip = (shipSize, x, y) => {\r\n\r\n        // if given coords are not empty return false\r\n        // else continue\r\n        for (let i = 0; i < shipSize; i++){\r\n            if(board[x][y + i] === ''){\r\n                continue;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // dynamic names assigned to the ships\r\n        let shipName = \"ship\" + counter + '';\r\n\r\n        // creating a new ship with those coords,name and size\r\n        let newShip = Ship(shipSize, shipName, x, y);\r\n\r\n        // adding the ship to the shipsContainer object\r\n        shipsContainer[\"ship\" + counter + ''] = newShip;\r\n\r\n        // adding ships parts to the board\r\n        for(let i = 0; i < shipSize; i++){\r\n            board[x][y + i] = shipsContainer[\"ship\" + counter].length[i];\r\n        }\r\n\r\n        counter++;\r\n\r\n        // return true when everything succeeds\r\n        return true;\r\n    }\r\n\r\n    // function to check if ships still remain on the board\r\n    let containsShips = () => {\r\n        if (isEmpty(shipsContainer)){\r\n            return false;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // function to attack ships\r\n    let recieveAttack = (x, y) => {\r\n        // if given coordinated exist\r\n        if (board[x] !== undefined && board[x][y] !== undefined){\r\n            \r\n            // if the spot at the given coordinantes has a part of a ship\r\n            if (board[x][y] !== '' && board[x][y] !== 'x' && board[x][y] !== '.'){\r\n                let name = board[x][y].substr(0, board[x][y].length - 1)\r\n                let hitSpot = board[x][y].substr(board[x][y].length - 1, board[x][y].length - 1);\r\n\r\n                // call the hit function on that ship\r\n                shipsContainer[name].hit(hitSpot);\r\n\r\n                // getting coordinates from the ship\r\n                let [xAx, yAx] = shipsContainer[name].coords;\r\n                let lengthOfShip = shipsContainer[name].length.length;\r\n\r\n                // update the board after attack hits;\r\n                for (let i = 0, c = yAx; i < lengthOfShip; i++){\r\n                    board[xAx][c + i] = shipsContainer[name].length[i];\r\n                }\r\n\r\n                // if ship has sunk then remove it from the objects\r\n                if (shipsContainer[name].isSunk()){\r\n                    delete shipsContainer[name];\r\n                }\r\n\r\n                return true;\r\n            }\r\n            else {\r\n                // if spot doesnt have a ship then check if it is empty;\r\n                if (board[x][y] === ''){\r\n                    // if empty then put . in it\r\n                    board[x][y] = '.';\r\n                    return true;\r\n                }\r\n\r\n                // return false since no ship was hit\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            // if coordinates dont exist on the board return true\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // check if obj is empty\r\n    function isEmpty(obj){\r\n        for (let key in obj){\r\n            if(obj.hasOwnProperty(key)){\r\n                return false\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    return {\r\n        board,\r\n        addShip,\r\n        recieveAttack,\r\n        containsShips,\r\n    }\r\n}\r\n\r\nexport default Gameboard;","import gameBoard from './Gameboard';\r\n\r\nfunction Player(playerName) {\r\n\r\n    // main startup\r\n    let name = playerName;\r\n    let playerBoard = gameBoard();\r\n    let enemy;\r\n\r\n    // function to play the turn\r\n    let playTurn = (enemy, x, y) => {\r\n\r\n        // check if enemy board still has ships or not\r\n        let won = !enemy.playerBoard.containsShips();\r\n\r\n        // if no ships are on the enemy board then player has won\r\n        if (won){\r\n            return true;\r\n        }\r\n\r\n        // attack the board and save the result\r\n        let result = enemy.playerBoard.recieveAttack(x, y);\r\n        \r\n        if (!result){\r\n            // if board couldn't record damage\r\n            // coordinates are invalid\r\n            return false\r\n        }\r\n\r\n        // check if board has ships again\r\n        won = !enemy.playerBoard.containsShips();\r\n        if (won) {\r\n            return true;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // implement auto turns for both computer and normal players\r\n    let autoTurn = (enemy) => {\r\n        let won = !enemy.playerBoard.containsShips();\r\n        if (won){\r\n            console.log(\"Won Already\");\r\n            return true;\r\n        }\r\n\r\n        // generate random coordinates\r\n        let randomX = Math.floor(Math.random() * 10);\r\n        let randomY = Math.floor(Math.random() * 10);\r\n        let eBoardSpot = enemy.playerBoard.board[randomX][randomY]\r\n\r\n        // if coordinates empty then continue\r\n        if (eBoardSpot !== '.' && eBoardSpot !== 'x'){\r\n\r\n            // attack and save the result\r\n            enemy.playerBoard.recieveAttack(randomX, randomY);\r\n        }\r\n        else {\r\n            return autoTurn(enemy);\r\n        }\r\n        won = !enemy.playerBoard.containsShips();\r\n    }\r\n\r\n    let autoPlace = (size) => {\r\n\r\n        // generating random coords\r\n        let randomX = Math.floor(Math.random() * 10);\r\n        let randomY = Math.floor(Math.random() * 10);\r\n        let result = playerBoard.addShip(size, randomX, randomY);\r\n\r\n        // if board failed to record the ships\r\n        // invalid coordinates\r\n        // try again\r\n        if (result === false){\r\n            return autoPlace(size)\r\n        }\r\n    }\r\n\r\n    // function to provide data to autoPlace function\r\n    let autoShipsAdd = () => {\r\n        let ships = [1,2,3,3,4,5];\r\n\r\n        // for each number in the ships array\r\n        // create a new ship of that size\r\n        for (let ship of ships){\r\n            autoPlace(ship);\r\n        }\r\n    }\r\n\r\n    return{\r\n        name,\r\n        playerBoard,\r\n        enemy,\r\n        playTurn,\r\n        autoTurn,\r\n        autoShipsAdd,\r\n    }\r\n}\r\n\r\n\r\n// Mock Function to test auto playing capability of both players\r\n// without outside intervention\r\nlet autoPlayer = (player, computer) => {\r\n    let winner;\r\n    while(winner !== true){\r\n        player.autoTurn(player.enemy);\r\n        computer.autoTurn(computer.enemy);\r\n\r\n        if(!player.playerBoard.containsShips()){\r\n            console.log(\"Player1 has won\")\r\n            winner = true;\r\n            return true;\r\n        }\r\n        else if(!computer.playerBoard.containsShips()){\r\n            console.log(\"Computer has Won!\");\r\n            winner = true;\r\n            return true;\r\n        }\r\n    }\r\n}\r\n\r\n// exports\r\nexport default Player;\r\nexport { autoPlayer };","// contains information about various ships\r\n\r\nlet carrier = [[1,2,3,4,5], \"carrier\"];\r\nlet battleship = [[1,2,3,4], \"battleship\"];\r\nlet cruiser = [[1,2,3], \"cruiser\"];\r\nlet submarine = [[1,2,3], \"submarine\"];\r\nlet destroyer = [[1,2], \"destroyer\"];\r\nlet smallShip = [[1], \"smallShip\"];\r\n\r\nlet allShips = [carrier, battleship, cruiser, submarine, destroyer, smallShip];\r\n\r\n// exports\r\nexport default allShips;\r\n","import React from 'react';\r\n\r\nexport default class BattleShip extends React.Component{\r\n    // eslint-disable-next-line\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    // when dragged send data\r\n    handleDrag = (event) => {\r\n        event.dataTransfer.setData(\"ShipSize\", event.target.dataset.size);\r\n        event.dataTransfer.setData(\"CurrentY\", event.target.dataset.current);\r\n        this.props.changeName(event.target.dataset.name)\r\n    }\r\n    changeData = (event) => {\r\n        event.target.parentElement.dataset.current = event.target.dataset.spot;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            this.props.shipsData.map((current, currentIndex) => {\r\n                return(\r\n                    <div\r\n                        key={currentIndex}\r\n                        className=\"Ships\"\r\n                        draggable={true}\r\n                        onDragStart={this.handleDrag}\r\n                        data-size = {current[0].length}\r\n                        data-name = {`${current[1]}`}\r\n                        data-current = {0}\r\n                    >\r\n                        {current[0].map((current, currentIndex) => {\r\n                            return (\r\n                            <span\r\n                                key={currentIndex}\r\n                                data-spot = {current}\r\n                                className=\"ship-item\"\r\n                                onMouseOver={this.changeData}\r\n                                >\r\n                            </span>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default function Header(props){\r\n    return(\r\n        <div className=\"Header\">\r\n            <h3 className=\"heading\">BattleShips!</h3>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function PlayButtons(props){\r\n    return(\r\n        <div className=\"main-buttons\">\r\n            <button className=\"button\" onClick={props.play}>PlayGame</button>\r\n            <button className=\"button\" onClick={props.restart}>Restart</button>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\n\r\nexport default function WinnerDisplayer(props){\r\n    return(\r\n        <div className=\"Winner\">\r\n            {(props.winner === '') ? 'none' : (props.winner === 'computer') ?\r\n            \"You Lost!\" : \"You Are The Winner\" }\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport Grid from './GridBoard';\r\nimport Player from '../Game/Player';\r\nimport allShips from '../Game/shipData';\r\nimport BattleShips from './BattleShips';\r\nimport Header from './Header';\r\nimport PlayButtons from './PlayButtons';\r\nimport WinnerDisplayer from './WinnerDisplayer';\r\n\r\nclass App extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props)\r\n\r\n        // main startup\r\n        let player1 = Player(\"Player1\");\r\n        let computer = Player(\"Computer\");\r\n        computer.autoShipsAdd();\r\n        player1.enemy = computer;\r\n        computer.enemy = player1;\r\n\r\n        // state\r\n        this.state = {\r\n            player1,\r\n            computer,\r\n            allShips,\r\n            shipName: '',\r\n            playable: false,\r\n            won: false,\r\n            winner: '',\r\n        }\r\n    }\r\n\r\n    refreshState = () => {\r\n\r\n        // basic startup\r\n        let player1 = Player(\"Player1\");\r\n        let computer = Player(\"Computer\");\r\n        computer.autoShipsAdd();\r\n        \r\n        // setting enemies\r\n        player1.enemy = computer;\r\n        computer.enemy = player1;\r\n\r\n        this.setState({\r\n            player1,\r\n            computer,\r\n            allShips,\r\n            shipName: '',\r\n            playable: false,\r\n            won: false,\r\n            winner: '',\r\n        })\r\n    }\r\n\r\n    forcePlayable = (event) => {\r\n        this.setState({\r\n            allShips: [],\r\n            playable: true,\r\n        })\r\n    }\r\n\r\n    \r\n\r\n    // function run when user clicks on a box (attacks)\r\n    playGame = (x, y) => {\r\n        if(this.state.playable){\r\n            let won = '';\r\n\r\n            // check if person already won\r\n            if(this.state.winner !== ''){\r\n                return;\r\n            }\r\n\r\n            // players turn;\r\n            let pResult = this.state.player1.playTurn(this.state.player1.enemy, x, y);\r\n            let computerBoard = this.state.player1.enemy.playerBoard.board;\r\n            if (pResult === false){\r\n\r\n                // if invalid attack then quit\r\n                return;\r\n            }\r\n\r\n            // check if the board still has ships\r\n            if(!this.state.player1.enemy.playerBoard.containsShips()){\r\n                this.setState({\r\n                    winner : \"player1\",\r\n                    playable: false,\r\n                })\r\n                won = \"player1\";\r\n            }\r\n            this.setState({[this.state.computer.playerBoard.board]: computerBoard})\r\n            if (won !== ''){\r\n                //alert(`${won} is the winner`);\r\n                return\r\n            }\r\n\r\n            // computers turn\r\n            this.state.computer.autoTurn(this.state.computer.enemy);\r\n            let playerBoard = this.state.computer.playerBoard.board;\r\n            // check if the board still has ships\r\n            if(!this.state.computer.enemy.playerBoard.containsShips()){\r\n                this.setState({\r\n                    winner : \"computer\",\r\n                    playable: false,\r\n                })\r\n                won = \"computer\";\r\n                //alert(`${won} is the winner`);\r\n            }\r\n\r\n            this.setState({[this.state.player1.playerBoard.board] : playerBoard});\r\n\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n\r\n    // adds the ship dragged onto the board on the spot it was dragged on\r\n    changeBoard = (size, x, y) => {\r\n        let result = this.state.player1.playerBoard.addShip(Number(size), x, y);\r\n        let board = this.state.player1.playerBoard.board;\r\n        if (result){\r\n            this.setState({[this.state.player1.playerBoard.board]: board})\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // changes the name of the ship to be removed\r\n    changeShipName = (name) => {\r\n        this.setState({shipName: name})\r\n    }\r\n\r\n    // removes the ship from the state when it's placed on the board\r\n    // also checks if all the available ships were placed on the board\r\n    // then allows the user to play the game by setting the playable state to true\r\n    changeShips = () => {\r\n        let name = this.state.shipName;\r\n        this.setState({\r\n           allShips : this.state.allShips.filter((current) => (current[1] !== name)),\r\n           playable : (this.state.allShips.filter((current) => (current[1] !== name)).length === 0) ? true : false,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <Header />\r\n                <PlayButtons play={this.forcePlayable} restart={this.refreshState}/>\r\n\r\n                {/* */}\r\n                {this.state.winner !== '' ? <WinnerDisplayer winner={this.state.winner}/> : null}\r\n                <div className=\"GameContainer\">\r\n                    <div className=\"ShipsContainer\">\r\n                        <BattleShips\r\n                            changeName={this.changeShipName}\r\n                            shipsData={this.state.allShips}\r\n                        />\r\n                    </div>\r\n                    <div className=\"Boards\">\r\n                        <Grid\r\n                            class={\"player\"}\r\n                            changeBoard={this.changeBoard}\r\n                            changeShips={this.changeShips}\r\n                            board={this.state.player1.playerBoard.board}\r\n                            playable={(this.state.allShips.length === 0) ? true: false}\r\n                            playGame={this.playGame}\r\n                        />\r\n                        <Grid \r\n                            class={\"computer\"}\r\n                            board={this.state.computer.playerBoard.board} \r\n                            playGame={this.playGame}\r\n                        />\r\n                    </div>\r\n                    <div className=\"board-name\">\r\n                        <h4 className=\"player-board\">^Player^</h4>\r\n                        <h4 className=\"computer-board\">^Computer^</h4>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './Components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}